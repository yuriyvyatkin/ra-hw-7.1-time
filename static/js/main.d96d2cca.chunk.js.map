{"version":3,"sources":["data/videoLinks.js","components/VideoList/Video/DateTime/DateTime.js","functions/getTimeDifference.js","functions/getNoun.js","functions/formatTimeDifference.js","components/VideoList/VideoList.js","hocs/withElapsedTime.js","components/VideoList/Video/Video.js","App.js","reportWebVitals.js","index.js"],"names":["videoLinks","id","url","date","title","DateTime","props","className","getTimeDifference","creationTime","Date","getTime","difference","minutes","Math","trunc","hours","days","getNoun","number","one","two","five","n","abs","formatTimeDifference","timeDifference","result","noun","VideoWithElapsedTime","WrappedComponent","withElapsedTime","state","updateState","bind","this","timerID","setInterval","clearInterval","setState","Component","wrappedComponentName","displayName","name","src","frameBorder","allow","allowFullScreen","VideoList","list","map","item","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d96d2cca.chunk.js","sourcesContent":["const videoLinks = [\n  {\n    id: 'mzdzMJthhVOJWVgAWsBOV',\n    url: 'https://www.youtube.com/embed/rN6nlNC9WQA?rel=0&amp;controls=0&amp;showinfo=0',\n    date: '2017-07-31 13:24:00',\n    title: 'Breathtaking Colors of Nature in 4K üåªüê¶Birds & Flowers - Sleep Relax Meditation Music - 2 hours UHD',\n  },\n  {\n    id: 'G5RdV1pOqHALXLT8hY1Oa',\n    url: 'https://www.youtube.com/embed/dVkK36KOcqs?rel=0&amp;controls=0&amp;showinfo=0',\n    date: '2018-03-03 12:10:00',\n    title: 'The Best 4K Aquarium for Relaxation üê† Sleep Relax Meditation Music - 2 hours - 4K UHD Screensaver',\n  },\n  {\n    id: 'QXxWn9sZvGkX7gYSwSbg4',\n    url: 'https://www.youtube.com/embed/xGRjCa49C6U?rel=0&amp;controls=0&amp;showinfo=0',\n    date: '2018-02-03 23:16:00',\n    title: '4K Tropical Beach - Relaxing Sea/ Ocean Wave Sounds & Ultra HD Nature Video - Meditate/ Yoga/ Sleep',\n  },\n  {\n    id: '6qaRTOdEZbzYJfTMJm6DM',\n    url: 'https://www.youtube.com/embed/RK1K2bCg4J8?rel=0&amp;controls=0&amp;showinfo=0',\n    date: '2018-01-03 12:10:00',\n    title: 'Breathtaking Colors of Nature in 4K III üê¶Beautiful Nature - Sleep Relax Music 4K UHD TV Screensaver',\n  },\n  {\n    id: 'ir0Vc8zwE0ON8tmU-VnrW',\n    url: 'https://www.youtube.com/embed/TKmGU77INaM?rel=0&amp;controls=0&amp;showinfo=0',\n    date: '2018-01-01 16:17:00',\n    title: '4K Ultra HD Video of Wild Animals - 1 HR 4K Wildlife Scenery with Floating Music',\n  },\n  {\n    id: 'SMDTTcsKWo6P0uyxghX9T',\n    url: 'https://www.youtube.com/embed/TxbE79-1OSI?rel=0&amp;controls=0&amp;showinfo=0',\n    date: '2017-12-02 05:24:00',\n    title: '4K African Wildlife | African Nature Showreel 2017 by Robert Hofmeyr',\n\n  },\n]\n\nexport default videoLinks;\n","import './DateTime.css';\n\nexport default function DateTime(props) {\n  return <p className=\"DateTime\">{props.date}</p>;\n}\n","export default function getTimeDifference(date) {\n  const creationTime = new Date(date).getTime();\n\n  const currentTime = new Date().getTime();\n\n  const difference = currentTime - creationTime;\n\n  const minutes = Math.trunc(difference / (1000 * 60));\n\n  const hours = Math.trunc(minutes / 60);\n\n  const days = Math.trunc(hours / 24);\n\n  return { days, hours, minutes };\n}\n","export default function getNoun(number, one, two, five) {\n  let n = Math.abs(number);\n  n %= 100;\n  if (n >= 5 && n <= 20) {\n    return five;\n  }\n  n %= 10;\n  if (n === 1) {\n    return one;\n  }\n  if (n >= 2 && n <= 4) {\n    return two;\n  }\n  return five;\n}\n","import getNoun from './getNoun';\n\nexport default function formatTimeDifference(timeDifference) {\n  let result;\n  let noun;\n\n  if (timeDifference.days !== 0) {\n    noun = getNoun(\n      timeDifference.days,\n      '–¥–µ–Ω—å',\n      '–¥–Ω—è',\n      '–¥–Ω–µ–π',\n    );\n    result = timeDifference.days;\n  } else if (timeDifference.hours !== 0) {\n    noun = getNoun(\n      timeDifference.hours,\n      '—á–∞—Å',\n      '—á–∞—Å–∞',\n      '—á–∞—Å–æ–≤',\n    );\n    result = timeDifference.hours;\n  } else {\n    noun = getNoun(\n      timeDifference.minutes,\n      '–º–∏–Ω—É—Ç—É',\n      '–º–∏–Ω—É—Ç—ã',\n      '–º–∏–Ω—É—Ç',\n    );\n    result = timeDifference.minutes;\n  }\n\n  return `${result} ${noun} –Ω–∞–∑–∞–¥`\n}\n","import Video from './Video/Video';\nimport withElapsedTime from '../../hocs/withElapsedTime'\n\nconst VideoWithElapsedTime = withElapsedTime(Video);\n\nexport default function VideoList(props) {\n  return props.list.map((item) => {\n    return (\n      <VideoWithElapsedTime key={item.id} url={item.url} date={item.date} />\n    );\n  });\n}\n","import { Component } from 'react';\nimport getTimeDifference from '../functions/getTimeDifference';\nimport formatTimeDifference from '../functions/formatTimeDifference';\n\nexport default function withElapsedTime(WrappedComponent) {\n  class withElapsedTime extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        timeDifference: formatTimeDifference(getTimeDifference(this.props.date))\n      }\n      this.updateState = this.updateState.bind(this);\n    }\n\n    componentDidMount() {\n      this.timerID = setInterval(\n        () => this.updateState(),\n        1000\n      );\n    }\n\n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n\n    updateState() {\n      this.setState({\n        timeDifference: formatTimeDifference(getTimeDifference(this.props.date)),\n      });\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} date={this.state.timeDifference} />;\n    }\n  }\n\n  const wrappedComponentName = WrappedComponent.displayName\n    || WrappedComponent.name\n    || 'Component';\n\n  withElapsedTime.displayName = `DateTimePretty(${wrappedComponentName})`;\n  return withElapsedTime;\n}\n","import './Video.css';\nimport DateTime from './DateTime/DateTime';\n\nexport default function Video(props) {\n  return (\n    <div className=\"Video\">\n      <iframe\n        src={props.url}\n        frameBorder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n        title={props.title}\n      />\n      <DateTime date={props.date} />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport videoLinks from './data/videoLinks';\nimport VideoList from './components/VideoList/VideoList';\n\nfunction App() {\n  const [list] = useState(videoLinks);\n\n  return (\n    <VideoList list={list} />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}